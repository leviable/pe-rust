// Consider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

// 22=4, 23=8, 24=16, 25=32
// 32=9, 33=27, 34=81, 35=243
// 42=16, 43=64, 44=256, 45=1024
// 52=25, 53=125, 54=625, 55=3125
// If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:

// 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

// How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?

use std::collections::HashSet;
use std::time::Instant;

use num_bigint::{BigUint, ToBigUint};

fn get_distinct_terms(a_max: u64, b_max: u64) -> usize {
    let mut set: HashSet<BigUint> = HashSet::new();
    let mut ans;
    let mut a_big;
    for a in 2..=a_max {
        for b in 2..=b_max {
            a_big = a.to_biguint().unwrap();

            ans = a_big.pow(b as u32);
            set.insert(ans);
        }
    }
    set.len()
}

#[test]
fn test_get_distinct_terms() {
    assert_eq!(get_distinct_terms(5, 5), 15);
}

fn main() {
    let start = Instant::now();
    let terms = get_distinct_terms(100, 100);
    println!("Distinct terms: {}", terms);
    println!("Elapsed time: {}", start.elapsed().as_secs_f64());
}
