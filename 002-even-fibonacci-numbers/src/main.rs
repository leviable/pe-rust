// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

fn main() {
    let even_fibs = fib(1, 2, 4_000_000);
    println!("Even fib sum is {}", even_fibs.into_iter().sum::<u64>())
}

fn fib(first: u64, second: u64, limit: u64) -> Vec<u64> {
    let mut v = Vec::new();
    let mut f = first;
    let mut s = second;
    let mut t;
    v.push(second);
    loop {
        t = f + s;
        if t >= limit {
            break;
        }

        if t % 2 == 0 {
            v.push(t);
        }
        f = s;
        s = t;
    }
    v
}

#[test]
fn test_fib() {
    let mut v = Vec::new();
    v.push(2);
    v.push(8);
    v.push(34);
    assert_eq!(fib(1, 2, 100), v);
    assert_eq!(fib(1, 2, 100).into_iter().sum::<u64>(), 44);
}
