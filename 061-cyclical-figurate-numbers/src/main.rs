// Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae:
//
// Triangle 	 	P3,n = n(n+1)/2     -> 1, 3, 6,  10, 15...
// Square       	p4,n = n**2         -> 1, 4, 9,  16, 25...
// Pentagonal	 	p5,n = n(3*n-1)/2   -> 1, 5, 12, 22, 35...
// Hexagonal        p6,n = n(n2-1)      -> 1, 6, 15, 28, 45...
// Heptagonal       p7,n = n(5n-3)/2    -> 1, 7, 18, 34, 55...
// Octagonal        p8,n = n(3*n-2)     -> 1, 8, 21, 40, 65...
//
// The ordered set of three 4-digit numbers: 8128,2882,8381 , has three
// interesting properties.
//
// 1. The set is cyclic, in that the last two digits of each number is the first two
//    digits of the next number (including the last number with the first).
// 2. Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and
//    pentagonal (P4,55=2882), is represented by a different number in the set.
// 3. This is the only set of 4-digit numbers with this property.
//
// Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.

use itertools::Itertools;

fn get_nums(f: fn(u64) -> u64) -> Vec<u64> {
    (1..)
        .map(|x| -> Option<u64> {
            let num = f(x);
            if num < 1_000 {
                Some(0)
            } else if num > 9_999 {
                None
            } else {
                Some(num)
            }
        })
        .scan((), |_, item| item)
        .filter(|x| x != &0)
        .collect::<Vec<_>>()
}

fn are_cyclic(x: u64, y: u64) -> bool {
    let x = x / 100;
    let y = y % 100;

    x == y
}

fn find_loop(nums: &[Vec<u64>; 6], perms: Vec<&u64>) -> Option<Vec<u64>> {
    for a in nums.clone()[*perms[0] as usize].clone() {
        'b: for b in nums.clone()[*perms[1] as usize].clone() {
            if are_cyclic(a, b) {
                'c: for c in nums.clone()[*perms[2] as usize].clone() {
                    if are_cyclic(b, c) {
                        'd: for d in nums.clone()[*perms[3] as usize].clone() {
                            if are_cyclic(c, d) {
                                'e: for e in nums.clone()[*perms[4] as usize].clone() {
                                    if are_cyclic(d, e) {
                                        'f: for f in nums.clone()[*perms[5] as usize].clone() {
                                            if are_cyclic(e, f) {
                                                if are_cyclic(f, a) {
                                                    return Some(vec![a, b, c, d, e, f]);
                                                }
                                            } else {
                                                continue 'f;
                                            }
                                        }
                                    } else {
                                        continue 'e;
                                    }
                                }
                            } else {
                                continue 'd;
                            }
                        }
                    } else {
                        continue 'c;
                    }
                }
            } else {
                continue 'b;
            }
        }
    }
    None
}

fn main() {
    let start = std::time::Instant::now();

    let tri_nums: Vec<u64> = get_nums(|n: u64| -> u64 { n * (n + 1) / 2 });
    let squ_nums: Vec<u64> = get_nums(|n: u64| -> u64 { n * n });
    let pen_nums: Vec<u64> = get_nums(|n: u64| -> u64 { n * (3 * n - 1) / 2 });
    let hex_nums: Vec<u64> = get_nums(|n: u64| -> u64 { n * (2 * n - 1) });
    let hep_nums: Vec<u64> = get_nums(|n: u64| -> u64 { n * (5 * n - 3) / 2 });
    let oct_nums: Vec<u64> = get_nums(|n: u64| -> u64 { n * (3 * n - 2) });

    let nums = [tri_nums, squ_nums, pen_nums, hex_nums, hep_nums, oct_nums];

    let perms = [0u64, 1, 2, 3, 4, 5]
        .iter()
        .permutations(6)
        .collect::<Vec<_>>();

    let mut sol: Option<Vec<u64>> = None;
    for perm in perms {
        sol = match find_loop(&nums, perm) {
            Some(x) => Some(x),
            None => continue,
        };
        break;
    }

    println!("Solution is : {:?}", sol);
    println!("Solution is : {:?}", sol.unwrap().iter().sum::<u64>());

    println!("Time elapsed: {}", start.elapsed().as_secs_f64());
}
