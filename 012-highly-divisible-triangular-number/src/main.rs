// The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

// Let us list the factors of the first seven triangle numbers:

//  1: 1
//  3: 1,3
//  6: 1,2,3,6
// 10: 1,2,5,10
// 15: 1,3,5,15
// 21: 1,3,7,21
// 28: 1,2,4,7,14,28
// We can see that 28 is the first triangle number to have over five divisors.

// What is the value of the first triangle number to have over five hundred divisors?

fn main() {
    let mut x = 0;
    let mut current_max = 0;
    loop {
        x += 1;

        let f = get_factors(x);

        if f.1.len() > current_max {
            current_max = f.1.len();
            // println!("New current max: {} at {} for {:?}", f.0, current_max, f.1);
            println!("New current max: {} at {}", f.0, current_max);
        }
        if x % 100 == 0 {
            println!("working on {}", x);
        }
        if f.1.len() > 500 {
            println!("Found it: {} - {:?}", f.0, f.1);
            break;
        }
    }
}

fn get_factors(num: u64) -> (u64, Vec<u64>) {
    let mut v = vec![1_u64];

    if num <= 1_u64 {
        return (1, v);
    }

    let mut triangle_num = 1;
    for i in 2..=num {
        triangle_num += i;
    }

    // Should be able to memoize here maybe? Or going backwards?
    // for i in 2_u64..=(triangle_num as f64).sqrt() as u64 {
    for i in 2_u64..=((triangle_num as f64) / 2.0) as u64 {
        if triangle_num % i == 0_u64 {
            v.push(i);
        }
    }
    v.push(triangle_num);
    (triangle_num, v)
}

#[test]
fn test_get_factors() {
    assert_eq!(get_factors(1_u64), (1, vec![1]));
    assert_eq!(get_factors(2_u64), (3, vec![1, 3]));
    assert_eq!(get_factors(3_u64), (6, vec![1, 2, 3, 6]));
    assert_eq!(get_factors(4_u64), (10, vec![1, 2, 5, 10]));
    assert_eq!(get_factors(5_u64), (15, vec![1, 3, 5, 15]));
    assert_eq!(get_factors(6_u64), (21, vec![1, 3, 7, 21]));
    assert_eq!(get_factors(7_u64), (28, vec![1, 2, 4, 7, 14, 28]));
}
