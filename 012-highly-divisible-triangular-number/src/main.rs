// The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

// Let us list the factors of the first seven triangle numbers:

//  1: 1
//  3: 1,3
//  6: 1,2,3,6
// 10: 1,2,5,10
// 15: 1,3,5,15
// 21: 1,3,7,21
// 28: 1,2,4,7,14,28
// We can see that 28 is the first triangle number to have over five divisors.

// What is the value of the first triangle number to have over five hundred divisors?

fn main() {
    let mut idx = 1;
    let mut current_max = 1;
    // let mut triangle_num = 1;
    let (mut triangle_num, mut factors) = get_factors(idx, 1);
    loop {
        idx += 1;

        (triangle_num, factors) = get_factors(idx, triangle_num);

        if idx % 100 == 0 {
            println!("working on idx: {} - {}", idx, triangle_num);
        }
        if factors.len() > current_max {
            current_max = factors.len();
            println!("New current max: {} at {}", triangle_num, current_max);
        }
        if factors.len() > 500 {
            println!("Found it: {} - {:?}", triangle_num, factors);
            break;
        }

        // if idx > 100 {
        //     break;
        // }
    }
}

fn get_factors(i: u64, last_triangle_num: u64) -> (u64, Vec<u64>) {
    let mut v = vec![1_u64];

    if i == 1 {
        return (1, v);
    }

    let triangle_num = last_triangle_num + i;
    // println!("1111111111111111111111111111111");
    // println!("last t num {}", last_triangle_num);
    // println!("new  t num {}", triangle_num);
    // println!("1111111111111111111111111111111");

    for idx in 2_u64..=((triangle_num as f64) / 2.0) as u64 {
        if triangle_num % idx == 0_u64 {
            v.push(idx);
        }
    }
    v.push(triangle_num);

    (triangle_num, v)
}

#[test]
fn test_get_factors() {
    assert_eq!(get_factors(1_u64), (1, vec![1]));
    assert_eq!(get_factors(2_u64), (3, vec![1, 3]));
    assert_eq!(get_factors(3_u64), (6, vec![1, 2, 3, 6]));
    assert_eq!(get_factors(4_u64), (10, vec![1, 2, 5, 10]));
    assert_eq!(get_factors(5_u64), (15, vec![1, 3, 5, 15]));
    assert_eq!(get_factors(6_u64), (21, vec![1, 3, 7, 21]));
    assert_eq!(get_factors(7_u64), (28, vec![1, 2, 4, 7, 14, 28]));
}
